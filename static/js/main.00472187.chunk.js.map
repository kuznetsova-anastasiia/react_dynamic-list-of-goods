{"version":3,"sources":["GoodsList.tsx","api/goods.ts","App.tsx","index.tsx"],"names":["GoodsList","React","memo","goods","map","good","name","id","color","style","getAll","fetch","then","response","ok","json","Promise","reject","Error","statusText","Sort","getButtonName","sortType","All","FirstFive","Red","None","App","useState","setGoods","sort","setSort","isError","setIsError","isLoading","setIsLoading","getGoods","useCallback","promise","a","handleClick","b","localeCompare","slice","filter","className","Object","values","value","current","type","onClick","ReactDOM","render","document","getElementById"],"mappings":"qQAOaA,EAA6BC,IAAMC,MAC9C,gBAAGC,EAAH,EAAGA,MAAH,OACE,6BACGA,EAAMC,KAAI,SAAAC,GACT,IAAQC,EAAoBD,EAApBC,KAAMC,EAAcF,EAAdE,GAAIC,EAAUH,EAAVG,MAElB,OACE,oBAEE,UAAQ,OACRC,MAAO,CAAED,SAHX,SAKGF,GAJIC,WCVV,SAASG,IACd,OAAOC,MAHI,yEAIRC,MAAK,SAAAC,GACJ,OAAKA,EAASC,GAMPD,EAASE,OALPC,QAAQC,OACb,IAAIC,MAAML,EAASM,gBAQtB,ICXFC,G,SAAAA,K,QAAAA,E,iBAAAA,E,8BAAAA,E,kBAAAA,M,KAOL,IAAMC,EAAgB,SAACC,GAAoB,IAAD,EAQxC,OAPuB,mBACpBF,EAAKG,IAAM,kBADS,cAEpBH,EAAKI,UAAY,sBAFG,cAGpBJ,EAAKK,IAAM,kBAHS,cAIpBL,EAAKM,KAAO,IAJQ,GAOEJ,IAGdK,EAAgB,WAC3B,MAA0BC,mBAAiB,IAA3C,mBAAOzB,EAAP,KAAc0B,EAAd,KACA,EAAwBD,mBAAeR,EAAKM,MAA5C,mBAAOI,EAAP,KAAaC,EAAb,KACA,EAA8BH,oBAAS,GAAvC,mBAAOI,EAAP,KAAgBC,EAAhB,KACA,EAAkCL,oBAAS,GAA3C,mBAAOM,EAAP,KAAkBC,EAAlB,KAEMC,EAAWC,sBAAW,uCAAC,WAAOC,GAAP,SAAAC,EAAA,6DAC3BJ,GAAa,GADc,cAIzBN,EAJyB,SAIVS,EAJU,kFAMzBL,GAAW,GANc,yBAQzBE,GAAa,GARY,4EAAD,sDAUzB,IAEGK,EAAcH,uBAAY,SAACf,GAC/B,GAAIQ,IAASR,EAAb,CAIA,OAAQA,GACN,KAAKF,EAAKG,IACRa,EAAS1B,KACT,MAEF,KAAKU,EAAKI,UACRY,EDnCC1B,IACJE,MAAK,SAAAT,GAAK,OAAIA,EACZ2B,MAAK,SAACS,EAAGE,GAAJ,OAAUF,EAAEjC,KAAKoC,cAAcD,EAAEnC,SACtCqC,MAAM,EAAG,OCiCR,MAEF,KAAKvB,EAAKK,IACRW,EDhCC1B,IACJE,MAAK,SAAAT,GAAK,OAAIA,EAAMyC,QAAO,SAAAvC,GAAI,MAAmB,QAAfA,EAAKG,aCsCzCuB,EAAQT,MACP,IAEH,OACE,sBAAKuB,UAAU,MAAf,UACE,uDAECC,OAAOC,OAAO3B,GACZwB,QAAO,SAAAI,GAAK,OAAIA,KAChB5C,KAAI,SAAA6C,GAAO,OACV,wBACEC,KAAK,SACL,UAASD,EACTE,QAAS,WACPX,EAAYS,IAJhB,SAOG5B,EAAc4B,QAIpBf,EACG,8CAEA,qCACGF,GACC,qDAGF,cAAChC,EAAD,CAAWG,MAAOA,WC3F9BiD,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.00472187.chunk.js","sourcesContent":["import React from 'react';\nimport { Good } from './types/Good';\n\ntype Props = {\n  goods: Good[]\n};\n\nexport const GoodsList: React.FC<Props> = React.memo(\n  ({ goods }) => (\n    <ul>\n      {goods.map(good => {\n        const { name, id, color } = good;\n\n        return (\n          <li\n            key={id}\n            data-cy=\"good\"\n            style={{ color }}\n          >\n            {name}\n          </li>\n        );\n      })}\n    </ul>\n  ),\n);\n","import { Good } from '../types/Good';\n\n// eslint-disable-next-line\nconst API_URL = `https://mate-academy.github.io/react_dynamic-list-of-goods/goods.json`;\n\nexport function getAll(): Promise<Good[]> {\n  return fetch(API_URL)\n    .then(response => {\n      if (!response.ok) {\n        return Promise.reject(\n          new Error(response.statusText),\n        );\n      }\n\n      return response.json();\n    });\n}\n\nexport const get5First = () => {\n  return getAll()\n    .then(goods => goods\n      .sort((a, b) => a.name.localeCompare(b.name))\n      .slice(0, 5));\n};\n\nexport const getRedGoods = () => {\n  return getAll()\n    .then(goods => goods.filter(good => good.color === 'red'));\n};\n","import React, { useCallback, useState } from 'react';\nimport './App.scss';\nimport { GoodsList } from './GoodsList';\nimport { Good } from './types/Good';\n\nimport { getAll, get5First, getRedGoods } from './api/goods';\n\nenum Sort {\n  None = '',\n  All = 'all-button',\n  FirstFive = 'first-five-button',\n  Red = 'red-button',\n}\n\nconst getButtonName = (sortType: Sort) => {\n  const contentBySortType = {\n    [Sort.All]: 'Load all goods',\n    [Sort.FirstFive]: 'Load 5 first goods',\n    [Sort.Red]: 'Load red goods',\n    [Sort.None]: '',\n  };\n\n  return contentBySortType[sortType];\n};\n\nexport const App: React.FC = () => {\n  const [goods, setGoods] = useState<Good[]>([]);\n  const [sort, setSort] = useState<Sort>(Sort.None);\n  const [isError, setIsError] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n\n  const getGoods = useCallback(async (promise: Promise<Good[]>) => {\n    setIsLoading(true);\n\n    try {\n      setGoods(await promise);\n    } catch {\n      setIsError(true);\n    } finally {\n      setIsLoading(false);\n    }\n  }, []);\n\n  const handleClick = useCallback((sortType: Sort) => {\n    if (sort === sortType) {\n      return;\n    }\n\n    switch (sortType) {\n      case Sort.All:\n        getGoods(getAll());\n        break;\n\n      case Sort.FirstFive:\n        getGoods(get5First());\n        break;\n\n      case Sort.Red:\n        getGoods(getRedGoods());\n        break;\n\n      default:\n        break;\n    }\n\n    setSort(sortType);\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <h1>Dynamic list of Goods</h1>\n\n      {Object.values(Sort)\n        .filter(value => value)\n        .map(current => (\n          <button\n            type=\"button\"\n            data-cy={current}\n            onClick={() => {\n              handleClick(current);\n            }}\n          >\n            {getButtonName(current)}\n          </button>\n        ))}\n\n      {isLoading\n        ? <p>Is Loading...</p>\n        : (\n          <>\n            {isError && (\n              <p>Something went wrong</p>\n            )}\n\n            <GoodsList goods={goods} />\n          </>\n        )}\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}